PRINCIPLES OF DOMAIN DRIVINE DESIGN(DDD)
1.Ubiquitous Language:
Speak the same language in code as you do in discussions.
Example: If you say "customer" in conversation, use "customer" in your code.
2.Bounded Context:
Clearly define boundaries for different parts of your system.
Example: Keep order-related terms separate from customer-related terms.
3.Aggregates:
Group related things together.
Example: If it's part of an order, keep items and customer info together.
4.Entities and Value Objects:
Entities have identity; Value Objects are defined by attributes.
Example: A person is an entity; an address is a value object.
5.Repositories:
Manage getting and storing grouped things.
Example: Handle finding and storing products if dealing with a "Products" group.
6.Services:
Use for operations that don't fit entities or value objects.
Example: Calculate shipping costs using a "ShippingService."
7.Domain Events:
Capture and represent important changes in the system.
Example: Trigger an "OrderPlaced" event when an order is made.
8.Modules:
 Organize code into clear parts based on business functions.
Example: Separate modules for inventory, orders, and customers instead of one big codebase.
                                           12-FACTORS PRINCIPLES
applications. Here's a concise summary of each factor:
1.Codebase:
One codebase per application, tracked in version control.
2.Dependencies:
Explicitly declare and isolate dependencies, use a package manager.
3.Config:
Store configuration in the environment, not in the code.
4.Backing Services:
Treat services (databases, queues) as attached resources.
5.Build, Release, Run:
Separate build, release, and run stages; strict versioning.
6.Processes:
Execute the app as one or more stateless processes.
7.Port Binding:
 Export services via port binding, and be ready to handle multiple instances.
8.Concurrency:
Scale out via the process model.
9.Disposability:
 Maximize robustness with fast startup and graceful shutdown.
10.Dev/Prod Parity:
Keep development, staging, and production environments as similar as possible.
11.Logs:
 Treat logs as event streams, write to standard output.
12.Admin Processes:
Run admin tasks as one-off processes separate from the main application.
                      MICROSERVICES ARCHIRECTURE
A microservices architecture is a type of application architecture where the application is developed as a collection of services. It provides the framework to develop, deploy, and maintain microservices architecture diagrams and services independently.
Advantages of Microservice Architecture:
Scalability:
Advantage: Easy to scale individual microservices independently based on demand.
Flexibility and Technology Diversity:
Advantage: Enables the use of different technologies and frameworks for each microservice, allowing teams to choose what fits best for their specific task.
Rapid Deployment and Continuous Delivery:
Advantage: Facilitates quicker deployment of individual microservices, enabling continuous delivery and faster time-to-market.
Isolation and Fault Tolerance:
Advantage: Failure in one microservice does not necessarily affect others, promoting fault isolation and improving system resilience.
Autonomous Development Teams:
Advantage: Teams can work independently on different microservices, fostering autonomy and parallel development.
Easy Maintenance and Upgrades:
Advantage: Easier to maintain and upgrade as changes are confined to specific microservices without affecting the entire system.
Technology Stack Diversity:
Advantage: Allows using the most suitable technology stack for each microservice, optimizing for specific requirements.
Scalability Across Development Teams:
Advantage: Enables multiple teams to work on different microservices concurrently, speeding up development.
Disadvantages of Microservice Architecture:
Complexity of Orchestration:
Disadvantage: Requires careful orchestration to manage communication and dependencies between microservices, adding complexity.
Increased Infrastructure Overhead:
Disadvantage: Managing multiple services can increase infrastructure overhead, especially in terms of monitoring, logging, and deployment.
Data Consistency Challenges:
Disadvantage: Maintaining data consistency across microservices can be challenging, especially in distributed systems.
Communication Overhead:
Disadvantage: Inter-service communication can introduce latency and may become a bottleneck, especially in a network-intensive environment.
Initial Development Cost:
Disadvantage: The initial development of microservices can be more complex and time-consuming compared to a monolithic architecture.
Testing Challenges:
Disadvantage: Comprehensive testing of microservices, especially in a distributed environment, can be challenging.
Security Concerns:
Disadvantage: Requires robust security measures, as the distributed nature of microservices can introduce new security challenges.
Operational Challenges:
Disadvantage: Operations and monitoring become more complex with a larger number of services, potentially requiring additional tooling and expertise.
                           MONOLITHIC ARCHITECTURE
A monolithic architecture is a singular, large computing network with one code base that couples all of the business concerns together.
Advantages of Monolithic Architecture:
Simplicity:
Advantage: Easier to develop and understand as all components are in one codebase.
Development Speed:
Advantage: Faster development since the entire application is built as a single unit.
Ease of Testing:
Advantage: Easier to test the entire application since all components are tightly integrated.
Simplified Deployment:
Advantage: Deployment is straightforward, involving the deployment of a single unit.
Efficient Resource Utilization:
Advantage: Requires less overhead compared to managing multiple services in a distributed environment.
Simplified Scaling:
Advantage: Scaling can be simpler since the entire application is scaled together.
Unified Technology Stack:
Advantage: All components use the same technology stack, simplifying development and maintenance.
Lower Operational Overhead:
Advantage: Fewer moving parts lead to lower operational complexity.

Advantages of Monolithic Architecture:

Simplicity:

Advantage: Easier to develop and understand as all components are in one codebase.
Development Speed:

Advantage: Faster development since the entire application is built as a single unit.
Ease of Testing:

Advantage: Easier to test the entire application since all components are tightly integrated.
Simplified Deployment:

Advantage: Deployment is straightforward, involving the deployment of a single unit.
Efficient Resource Utilization:

Advantage: Requires less overhead compared to managing multiple services in a distributed environment.
Simplified Scaling:

Advantage: Scaling can be simpler since the entire application is scaled together.
Unified Technology Stack:

Advantage: All components use the same technology stack, simplifying development and maintenance.
Lower Operational Overhead:

Advantage: Fewer moving parts lead to lower operational complexity.
Disadvantages of Monolithic Architecture:
Scalability Limitations:
Disadvantage: Scaling is done for the entire application, even if only specific components need more resources.
Limited Technology Diversity:
Disadvantage: Limited flexibility in choosing different technologies for different components.
Difficult Maintenance and Updates:
Disadvantage: Changes or updates may require redeployment of the entire application, leading to downtime.
Bottlenecks in Development:
Disadvantage: Larger codebase can lead to slower development and increased complexity.
Difficulty in Adopting New Technologies:
Disadvantage: It can be challenging to adopt new technologies or frameworks without a major overhaul.
Less Fault Isolation:
Disadvantage: Failure in one part of the application can affect the entire system.
Reduced Team Autonomy:
Disadvantage: Teams may need to coordinate closely when working on different parts of the application.
Increased Risk of Codebase Monolith:
Disadvantage: Over time, the codebase may become a monolith, making it harder to maintain and evolve.
                                CODING STANDARDS IN JAVA
1.High Availability:-
   It means designing and configuring the application. So your application continues work smoothly even if certain problems are there.
Key Points:-
* Redundancy
* Fault Tolerance
* Load Balancing
* Monitoring and Management
* Data Replication
* Quick Recovery
2.Auto Scaling:-
Auto Scaling is used to improve or reduce load based on the User Management.
For example, If one of application or code using more people, Then Auto Scaling is improve the load and handle it. And that application or code using less people, Then Auto Scaling is reduce the load and handle it. Auto Scaling can do improve or reduce automatically  based on the demand.
Benefits of Auto Scaling:-
->No Stress
->Efficiency
->Always Ready
4.Observability:-
While execute the coding at that time we observing the application behavior. It involves collecting and analyzing data such as logs, metrics, traces, and other information to understand how the application is performing and behaving in real-time.
5.Monitoring:-
While executing the code we have to monitor the application performance and system behavior like CPU, Memory, Disc and Network. And find out the quick response for that application and performance related errors.
->If the application execute in Windows then we have to use the monitoring tool like Perfmon.
-> If the application execute in Linux then we have to use the monitoring tool like Nmon.
There are so many monitoring tools like Dynatrace , Appdynamics etc…
6. Alerting:-
Alerting means it shows the some popup or notification or warning message or alarms.
Ex:- data message, recharge message, and limited transaction in phone pay/ google pay.
7. Logging:-
In log file we analyze the results and find out the errors. There are two types of logs
Log4j and Log back.
8. RTO and RPO in java
 RTO:-  Recovery Time Objective, is a metric that defines the maximum acceptable downtime for a system or application after a failure or disruption. It represents the targeted duration within which a system should be restored to normal operation following a failure. 
  Achieving a specific RTO involves planning and implementing strategies for disaster recovery and system resilience.
RPO:- Recovery Point Objective, is a critical metric in disaster recovery and business continuity planning.
   It represents the maximum allowable data loss that an organization is willing to tolerate in the event of a system failure or disaster.
   In the context of Java applications, achieving a specific RPO involves implementing strategies to ensure that data is regularly backed up and that recovery points are maintained within acceptable limits.
OSI Models
o OSI stands for Open System Interconnection is a reference model that describes how information from a software application in one computer moves through a physical medium to the software application in another computer.
o OSI consists of seven layers, and each layer performs a particular network function.
o OSI model was developed by the International Organization for Standardization (ISO) in 1984, and it is now considered as an architectural model for the inter-computer communications.
o OSI model divides the whole task into seven smaller and manageable tasks. Each layer is assigned a particular task.
o Each layer is self-contained, so that task assigned to each layer can be performed independently.
Layers of OSI model
1. Physical Layer 
2. Direct Link Layer
3. Network Layer 
4. Transport Layer
5. Session Layer 
6. Presentation Layer
7. Application Layer




